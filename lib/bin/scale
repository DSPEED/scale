#!/usr/bin/env node

var os = require("os");
var path = require("path");
var fs = require("fs-extra");
var spawn = require("child_process").spawn;
var net = require("net");
var util = require("util");
var async = require("async");
var _ = require("lodash");
var program = require("commander");
var winston = require("winston");
var editor = require("editor");
var cfg = require("../scale").config;
var pkg = require("../package.json");

var eol = "win32" === os.platform() ? "\r\n" : "\n";

// Logging
var logger = new winston.Logger({
  transports: [
  new winston.transports.Console({
    colorize: true,
    prettyPrint: true
  })]
});

program.version(pkg.version)
  .option("-e, --edit", "edit config");

program.command("config")
  .description("show config")
  .action(function() {
  program.edit ? editor(cfg.file) : logger.info(JSON.stringify(cfg, null, 2));
  logger.info(cfg.file.grey);
});

program.command("start").description("start scale").action(function() {
  start();
});

program.command("stop").description("stop scale").action(function() {
  stop();
});

program.command("restart").description("restart scale").action(function() {
  stop();
  setTimeout(start, 200);
});

program.command("*").description("unknown command").action(function() {
  logger.error("unknown command");
  program.help();
});

program.parse(process.argv);

if (!program.args.length) {
  program.help();
}

function start() {
  logger.info("starting scale on port " + cfg.port.toString().grey);

  // Check if port is in use
  var client = net.connect(cfg.port);
  client.on("connect", function() {
    logger.error("failed starting scale - " + "port already in use".yellow);
    client.end();
  });

  client.on("error", function() {
    // Check if forwarding ports are in use
    async.parallel(_.map(cfg.forward, function(fwd) {
      return function(cb) {
        logger.info(util.format("forwarding port %d %s %s:%d", fwd.port, "=>".blue, fwd.target.hostname, fwd.target.port));

        var port = net.connect(fwd.port);
        port.on("connect", function() {
          port.end();
          cb(new Error(util.format("port %s already in use", fwd.port)));
        });

        port.on("error", function() {
          // Okay
          cb();
        });
      };
    }), function(err) {
      if (err) {
        return logger.error(err.message);
      }
      // Start scale
      var child = spawn(process.execPath, [path.join(__dirname, "..", "server")], {
        detached: true,
        stdio: "ignore"
      });
      try {
        fs.writeFileSync(cfg.pidFile, child.pid + eol);
        child.unref();
      } catch (e) {
        logger.error("failed starting scale - " + e.message.yellow);
      }
    });
  });
}

function stop() {
  logger.warn("stopping scale");
  try {
    var pid = fs.readFileSync(cfg.pidFile, "utf-8");
    process.kill(pid);
  } catch (e) {
    logger.error("failed stopping scale - " + e.message.yellow);
  }
}